print("x")
val x = 10
var x = 10
numero <- 10
print(numero)
numero <- 10 * 20
print(numero)
numero <- 10 / 20
print(numero)
outro_numero <- numero + 9
print(outro_numero)
lista <- c(7,8,9,10,6)
mean(lista)
summary(lista)
lista <- c(1,2,3,4,5)
summary(list)
summary(lista)
lista <- c(1,2,3,4,5,6,7,8)
summary(lista)
install.packages("RMySQL")
mydb = dbConnect(MySQL(), user='user', password='password', dbname='database_name', host='host')
library(RMySQL)
install.packages("RMySQL")
library(RMySQL)
mydb = dbConnect(MySQL(), user='user', password='password', dbname='database_name', host='host')
c('a', 'b')
a <- c('a', 'b')
mean(a)
c(1,7:9)
c(1:5, 10.5, "next")
1:5
5:50
teste <- 'a'
teste <- "a"
print(teste)
teste <- 'a'
print(teste)
teste <- "tais"
teste <- "thais"
teste[0:1]
teste[0]
print(teste[1])
print(teste[0])
print(teste[1:1])
print(teste[0])
if teste == "thais"
if teste == "thais"
priceCalculator <- function(hours, pph=40){
net.price <- hours * pph
if(hours > 100) {
net.price <- net.price * 0.9
}
round(net.price)
}
priceCalculator(50)
priceCalculator <- function(hours, pph=40){
net.price <- hours * pph
if(hours > 100) {
net.price <- net.price * 0.9
}
round(net.price)
}
funcao_teste <- function(a){}
funcao_teste <- function(a){
a * 2
}
funcao_teste(1)
funcao_teste('a')
teste <- c(1,2,3)
mean(teste)
teste <- c(1,2,3h <- hash() )
h <- hash()
h[c("1", "foo")]
h <- hash()
mean(teste)
median(teste)
summary(teste)
for (year in c(2010,2011,2012,2013,2014,2015)){
print(paste("The year is", year))
}
for (number in c(1,2,3,4,5) ) {
print(“o número é: “, number))
}
for (number in c(1,2,3,4,5) ) {
print(paste(“o número é: “, number)))
}
for (number in c(1,2,3,4,5) ) {
print(“o número é: “, number))
}
for (number in c(1,2,3,4,5) ) {
print(“o numero eh: “, number))
}
for (number in c(1,2,3,4,5) ) {
print(number)
}
i <- 1
while (i < 6) {
print(i)
i = i+1
}
I <- 1
while (i < 6) {
print(i)
i = i+1
}
i <- 1
while (i < 6) {
print(i)
i = i+1
}
t <- (1,2,3)
t <- c(1,2,3)
sum(t)
min(t)
count(t)
max(t)
lista <- c(1,2)
lista[1]
lista[0]
lista[2]
lista[55]
lista[1:2]
lista[1:]
lista[1:-1]
lista[1:]
lista[1:1]
lista[1:2]
h <- hash()
typeof(lista)
list <-c (1)
typeof(list)
# library
library(ggplot2)
# The iris dataset is proposed by R
head(iris)
# basic scatterplot
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point()
a <- available.packages()
a
a <- available.packages()
head(rownames(a), 3)
a [1:2]
a [1:5]
print(a)
packages <- available.packages()
print(packages)
install.packages(c( “slidify”, “ggplot2”))
install.packages(c( "slidify", "ggplot2"))
install.packages(‘ggplot2’)
install.packages(‘ggplot2’)
library(ggplot2)
# The iris dataset is proposed by R
head(iris)
# basic scatterplot
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()
c []
c <- 'a'
c <- 1
prprint())
print(c)
if( numero > 10 ){
print(“maior que dez”)
} else {
print(“menor ou igual a dez”)
}
if( numero > 10 ){
print(“maior que dez”)
} else {
print(“menor ou igual a dez”)
}
if( numero > 10 ){
print("maior que dez")
} else if (numero == 0){
print("menor ou igual a dez")
}
numero <- 1
if( numero > 10 ){
print("maior que dez")
} else if (numero == 0){
print("menor ou igual a dez")
}
if( numero > 10 ){
print("maior que dez")
} else if (numero == 1){
print("menor ou igual a dez")
}
if( numero > 10 ){
print("maior que dez")
} else if (numero == 1){
print("menor ou igual a dez")
}
bool <- numero > 10
print(bool)
install.packages("ggplot2")
library(ggplot2)
head(iris)
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()
set.seed(7)
library(mlbench)
install.packages(c("caret", "mlbench"))
data(PimaIndiansDiabetes)
data(PimaIndiansDiabetes)
correlationMatrix <- cor(PimaIndiansDiabetes[,1:8])
data(PimaIndiansDiabetes)
PimaIndiansDiabetes
correlationMatrix <- cor(iris)
iris
correlationMatrix <- cor(iris[,1:6])
iris[,1:6]
iris[1:6]
iris
install.packages(c("FactoMineR", "factoextra"), dependencies=TRUE)
install.packages("car")
install.packages(c("FactoMineR", "factoextra"), dependencies=TRUE)
install.packages(c("FactoMineR", "factoextra"), dependencies=TRUE)
install.packages("car")
setRepositories()
install.packages()
library("FactoMineR") #MCA
install.packages("ggplot2")
install.packages(c('tibble', 'dplyr', 'tidyr'))
library(tibble)
library(dplyr)
library(tidyr)
d2 <- d %>%
as.matrix %>%
cor %>%
as.data.frame %>%
rownames_to_column(var = 'var1') %>%
gather(var2, value, -var1)
d2 <- d %>%
as.matrix %>%
cor %>%
as.data.frame %>%
rownames_to_column(var = 'var1') %>%
gather(var2, value, -var1)
tail(mydata1) # last 5 rows of data frame
setwd(paste(getwd(), "/r-worksheet", sep = "")) # SETING WORK DIRECTORY
getwd() # GET WORKING DIRECTORY
mydata1 = read.csv("example.csv") # import CSV
mydata2 = read.csv("example.csv")
head(mydata1) # first 5 rows of data frame
tail(mydata1) # last 5 rows of data frame
nrow(mydata1) # number of rows of data frame
myfulldata = rbind(mydata1, mydata2) # append files
print(nrow(myfulldata))
install.packages("fastDummies") # install dummies
library(fastDummies) # import dummies
categoricalDataFrame = read.csv("example_categorical.csv")
summary(categoricalDataFrame) #VERIFICAR A QUALIDADE DOS DOS DADOS
dummies = fastDummies::dummy_cols(categoricalDataFrame)
#dummie variables
print(dummies)
# ANÁLISE DE CORRESPONDÊNCIA MULTIPLA (MCA)
#install.packages(c("FactoMineR", "factoextra"), dependencies=TRUE)
#library("FactoMineR") #MCA
#library("factoextra") #PLOT
## install.packages(c('tibble', 'dplyr', 'tidyr'))
#library(tibble)
#library(dplyr)
#library(tidyr)
