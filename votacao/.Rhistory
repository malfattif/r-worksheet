(0.01 + 0.02) - 0,005
(0.01 + 0.02) - 0.005
100 * (0.01 + 0.02) - 0.005)
(0.01 + 0.02) - 0.005)
((0.01 + 0.02) - 0.005)
((0.01 + 0.02) - 0.005) * 100
6500/350
6850 * 0.1857
(6850 * 0.1857) / 6850
1272.045/ 6850
6500/350
350/6500
1272.045/6850
1272.0450/6850
350/6500
350/6850
50/1500
50/1550
(0.3 * 0.03) / (0.3 * 0.03) + (0.7) * (0.05)
(0.3 * 0.03) / ((0.3 * 0.03) + (0.7) * (0.05))
(0.03 * 0.03) / ((0.3 * 0.03) + (0.7) * (0.05))
(0.03 * 0.03) / ((0.3 * 0.03) + ((0.7) * (0.05)) )
(0.03 * 0.03) / ((0.3 * 0.03) + ((0.7) * (0.7)) )
(0.3 * 0.3) / ( (0.3 * 0.3) + ( (0.7) * (0.05) ) )
(5/12) * (3/5) / ( 5/12 * 3/5 ) + ( 7/12) * (1/7)
(5/12) * (3/5) / ( ( 5/12 * 3/5 ) + ( ( 7/12) * (1/7) ) )
(5/12) * (3/5) / ( ( 5/12 * 3/5 ) + ( ( 7/12) * (1/7) ) )
( 1 / 2 ) + 1/2
( 1 / 2 ) * 1/2
0.5 * 0.5 * 0.5 * 0.5 * 0.5
var
0.5 * 0.5 * 0.5 * 0.5 * 0.5
let
ls()
0.5 * 0.5 * 0.5
0.5 * 0.5 * 0.5 * 0.5 * 0.5
0.5 * 0.5 * 0.5 * 0.5 * 0.5
3!
lfactorial(2)
factorial(3)
(factorial(7) / factorial(7) ) * ((0.4)^7 * (0.6))
(factorial(7) / factorial(7) ) * ( ((0.4)^7)  * (0.6) )
(factorial(7) / factorial(7) ) * ( ((0.4)^7)  * (0.6) )
( ((0.4)^7)  * (0.6) )
(factorial(7) / factorial(7) ) * ( ((0.4)^7)  * (0.6) )
0.4 ^ 7
0.4 ^ 7 * 0.6
factorial(7)
factorial(7) * (0.4 ^ 7 * 0.6)
factorial(7) * ( (0.4 ^ 7) * 0.6)
(factorial(7) / factorial(7) ) * ( ( (0.4)^7)  * (0.6) )
(factorial(7) / factorial(7) ) * ( ( (0.4)^7)  * (0.6) )
0.4 ^7
( factorial(7) / factorial(7) ) * ( ( (0.4)^7)  * (0.6) )
( factorial(7) / factorial(7) ) * ( ( (0.4)^7)  * (0.6) )
( ( (0.4)^7)  * (0.6) )
( ( (0.4)^7)  * (0.6)^0 )
( ( (0.4)^7)  * (0.6)^ 0 )
0.6 ^0
0.4 ^ 7
(0.4 ^ 7) * 1
2^2
2^3
(0.4 ^ 7) * 1
( factorial(7) / factorial(7) ) * ( (0.4^7)  * (0.6 ^ 0 ) )
( factorial(7) / factorial(7) )
( factorial(7) / factorial(7) ) * ( (4^7)  * (6 ^ 0 ) )
( factorial(7) / factorial(7) ) * ( (0.4^7)  * (0.6 ^ 0 ) )
( factorial(7) /  ( factorial(0) * factorial(7) ) * ( (0.4^7)  * (0.6 ^ 0 ) )
)
( factorial(7) /  ( factorial(0) * factorial(7) )) * ( (0.4^7)  * (0.6 ^ 0 ) )
( factorial(0) * factorial(7) )
factorial(0)
20 * 0.072
20 * 0.072
factorial(20)
factorial(20) / (factorial(2) * factorial(18))
factorial(20) / (factorial(1) * factorial(19))
factorial(20) / (factorial(1) * factorial(19)) * (0.072 * (1-0.072)^19)
factorial(20) / (factorial(1) * factorial(19)) * (0.072^1 * (1-0.072)^19)
(factorial(20) / (factorial(1)) * factorial(19)) * (0.072^1 * (1-0.072)^19 )
(factorial(20) / ((factorial(1)) * factorial(19))) * (0.072^1 * (1-0.072)^19 )
(factorial(20) / ((factorial(2)) * factorial(19))) * (0.072^2 * (1-0.072)^19 )
(factorial(20) / ((factorial(1)) * factorial(19))) * (0.072^1 * (1-0.072)^19 )
(factorial(20) / ((factorial(1.44)) * factorial(19))) * (0.072^1.44 * (1-0.072)^19 )
85/2
(factorial(20) / ((factorial(1.44)) * factorial(19))) * (0.072^1.44 * (1-0.072)^19 )
(factorial(20) / ((factorial(1.44)) * factorial(18.56))) * (0.072^1.44 * (1-0.072)^19 )
(factorial(20) / ((factorial(2)) * factorial(18.56))) * (0.072^1.44 * (1-0.072)^19 )
(factorial(20) / ((factorial(0)) * factorial(20))) * (0.072^0 * (1-0.072)^20 )
(factorial(20) / ((factorial(1)) * factorial(20))) * (0.072^1 * (1-0.072)^19 )
(factorial(20) / ((factorial(1)) * factorial(19))) * (0.072^1 * (1-0.072)^19 )
(factorial(20) / ((factorial(0)) * factorial(20))) * (0.072^0 * (1-0.072)^20 )
(factorial(20) / ((factorial(1)) * factorial(19))) * (0.072^1 * (1-0.072)^19 )
(factorial(20) / ((factorial(1)) * factorial(19))) * (0^1 * (1-0)^19 )
(factorial(20) / ((factorial(1)) * factorial(19))) * (1^20 * (1-1)^19 )
( factorial(19) / ( factorial(1) * factorial(19) ) )  * ( 0 ^ 0  (1-0)^20 )
( factorial(19) / ( factorial(1) * factorial(19) ) )  * ( 0 ^ 0  * (1-0)^20 )
( factorial(19) / ( factorial(1) * factorial(19) ) )  * ( 20 ^ 1  * (1-0)^20 )
( factorial(19) / ( factorial(1) * factorial(19) ) )  * ( 20 ^ 1  * (1-20)^20 )
( factorial(19) / ( factorial(1) * factorial(19) ) )  * ( 1 ^ 1  * (1-20)^20 )
( factorial(19) / ( factorial(1) * factorial(19) ) )  * ( 1 ^ 1  * (1-1)^19 )
( factorial(19) / ( factorial(1) * factorial(19) ) )  * ( 1 ^ 1  * (1-1) ^ 19 )
( factorial(19) / ( factorial(1) * factorial(19) ) )  * ( 1 ^ 1  * (1-1) ^ 19 )
d = 4 > 2
d
typeof(d)
peso = c(60, 72, 57, 90, 95, 72)
peso > 70
altura= c(1.75, 1.80, 1.65, 1.90, 1.74, 1.91)
nome = ("jó", "josé", "joão, "zé", "noé", "mané)
nome = ("jó", "josé", "joão, "zé", "noé", "mané")
nome = ("jó", "josé", "joão", "zé", "noé", "mané")
nome = c("jó", "josé", "joão", "zé", "noé", "mané")
ls()
peso [peso > 70]
imc = peso / altura ^ 2
print(imc)
nome[imc > 25]
nome [peso > 70]
sort(peso)
sort(peso, decreasing = true)
sort(peso, decreasing = True)
sort(peso, decreasing = true)
sort(peso)
sort(peso, decreasing  decreasing = true)
sort(peso, decreasing  decreasing = TRUE)
sort(peso, decreasing = TRUE)
var(peso)
var(peso, na.rm = FALSE)
sd(peso, na.rm = FALSE)
peso
mean(peso)
mean(peso)
quilometragem =  c(65311, 65624, 65908, 66219, 66499, 66821, 67145, 67447)
mean(quilometragem)
diff(km)
diff(km)
diff(km)
diff(quilometragem)
mean(diff(quilometragem))
x = diff(km)
x = diff(quilometragem)
mean(x/30)
x
x = c("Yes", "No", "No", "Yes", "Yes","No","No", "Yes")
table(x)
factor(x)
factor(x)
x= 0:10
n = 5
p = 0.1
fx = dbinom(x,n,p, log=FALSE)
plot(x, fx, ylab = 'Função de densidade', main = 'Função densidade', type='S', col='blue')
fx = pbinom(x,n,p, log=FALSE)
plot(x, fx, ylab ='Função probabilistica', main='Função probabilidade', type = 'S', col='orange')
print(fx)
t = 0:20
lambda = 4
fx = dep(t, rate=1/lambda)
fx = dexp(t, rate=1/lambda)
plot(t, fx, xlab='Tempo', ylab = 'Probabilidade', main = 'Função distribuição de probabilidade', type = 'l', col='purple')
fx
1/lambda
x = seq(-5,5,0.001)
x
t = dnorm(x)
hist(h = rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h = rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica', x =x)
hist(h = rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h = rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica', x = t)
hist(h = rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h = rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(x = rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h <- rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h <- rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = t, main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h <- rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h <- rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h <- rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h = rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h = rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h <- rnorm(10000), probability = TRUE, col = 'lightgreen', ylim = c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h <- rnorm(10000), probability = TRUE, col = 'lightgreen', ylim <- c(0,0,42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h <- rnorm(10000), probability = TRUE, col = 'lightgreen', ylim <- c(0,0.42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h <- rnorm(10000), probability = TRUE, col = 'lightgreen', ylim <- c(0,0.42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(h <- rnorm(10000), probability = TRUE, col = 'lightgreen', ylim= c(0,0.42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
hist(x = rnorm(10000), probability = TRUE, col = 'lightgreen', ylim= c(0,0.42), main = '', xlab = 'x', ylab = 'Densidade probabilistica')
line(x, y, type='l', col='red')
lines(x, y, type='l', col='red')
y = dnorm(x)
lines(x, y, type='l', col='red')
z = seq(-3,5,0.001)
t =dnorm(z)
lines(z, t, type ='l', color'blue')
lines(z, t, type ='l', color='blue')
lines(z, t, type ='l', col='blue')
lines(z, t, type ='l', col='blue')
lines(x, y, type='l', col='red')
z = seq(-3,5,0.002)
t =dnorm(z)
lines(z, t, type ='l', col='blue')
lines(x, y, type='l', col='red')
clear
x <- c(1,2,3,4,5)
y <- (6,7,8,9,10)
y <- c(6,7,8,9,10)
plot(x,y)
cls
idade - c(76,60,70,72,69,73,64,70,99,66)
idade = c(76,60,70,72,69,73,64,70,99,66)
mem = c(27, 29, 27, 18, 27, 25, 28, 24, 25, 28)
idade = c(76,60,70,72,69,73,64,70,88,66)
da = data.frame(idade, meem)
da = data.frame(idade, mem)
da
da['idade'].mean()
da['idade']
da['idade']
mean(da['idade'])
typeof(da['idade'])
typeof(da['idade'][0])
typeof(da['idade'][1])
meem = c(27, 29, 27, 18, 27, 25, 28, 24, 25, 28)
da = data.frame(idade, meem)
da
del mem
mem = null
mem = nill
remove(mem)
plot(da$idade, da$meem)
da$idade
mean(da$idade)
mean(da$meem)
cor(da$idade, da$meem)
cor(da)
round(cor(da), 2)
pairs(da)
animais = c(10,13,14,11,10,17, 7,12,13)
frutac = c(11, 11, 14, 9, 7 ,14, 9, 4,13, 12)
frutas = c(11, 11, 14, 9, 7 ,14, 9, 4,13, 12)
remove frutac
remove(frutac)
fas = c(3, 20, 27,26,16,41,34,13,31,38)
dados.fv = data.frame(animais, frutas, fas)
animais = c(10,13,14,11,10,17,10, 7,12,13)
dados.fv = data.frame(animais, frutas, fas)
dados.fv
pairs(dados.fv)
cor(dados.fv)
cor.test(da$idade, da$meem)
var1 = c(10, 9, 5, 6, 7)
var2 = c(3, 6, 10, 5, 4)
cor.test(var1, var2, method="spearman")
y = c(110, 120, 90, 70, 80, 40 , 40, 50, 30)
xx = 1:10
modelo = lm(xx ~ y)
y = c(110, 120, 90, 70, 50, 80, 40 , 40, 50, 30)
modelo = lm(xx ~ y)
modelo
plot(xx ~ y)
abline(modelo, col=2, lty=2, lwd=2)
legend("top", legend=c("Valores observados", "Valores ajustados"), lty=c(NA, 2), col=c(1,2), lwd=1:2, bty="n", pch=C(1,NA) )
legend("top", legend=c("Valores observados", "Valores ajustados"), lty=c(NA, 2), col=c(1,2), lwd=1:2, bty="n", pch=C(1,NA))
legend("top", legend=c("Valores observados", "Valores ajustados"), lty=c(NA, 2), col=c(1,2), lwd=1:2, bty="n", pch=C(1,NA))
legend("top", legend=c("Valores observados", "Valores ajustados"), lty=c(NA, 2), col=c(1,2), lwd=1:2, bty="n")
legend("top", legend=c("Valores observados", "Valores ajustados"), lty=c(NA, 2), col=c(1,2), lwd=1:2, bty="n", pch=c(1, NA))
predict(modelo)
residuals(modelo)
par(mfrow = c(2,2))
plot(modelo)
altura = c(15, 168, 170, 171, 169, 165, 165, 160 ,180 , 186)
peso = c(80, 68,172,75,70,65,62,60,85,90)
modelo.exemplo2 = lm(formular = altura ~ peso, x=TRUE, y = TRUE)
modelo.exemplo2 = lm(formula = altura ~ peso, x=TRUE, y = TRUE)
modelo.exemplo2
peso = c(80, 68,72,75,70,65,62,60,85,90)
modelo.exemplo2 = lm(formula = altura ~ peso, x=TRUE, y = TRUE)
modelo.exemplo2
altura = c(175, 168, 170, 171, 169, 165, 165, 160 ,180 , 186)
modelo.exemplo2 = lm(formula = altura ~ peso, x=TRUE, y = TRUE)
modelo.exemplo2
summary(mdelo.exemplo2)
summary(modelo.exemplo2)
plot(peso, altura)
abline(modelo.exemplo2, col="rted")
abline(modelo.exemplo2, col="red")
fitted(modelo.exemplo2)
resid(modelo.exemplo2)
plot(peso,altura)
lines(peso, fitted(modelo.exemplo2))
peso = c(1507,
2635,
1205,
1380,
1475,
1310,
1690,
1120,
2215,
980,
1590,
1780,
1640,
1245,
1590,
2470,
2960,
2355,
1830,
1925
)
peso
consumo = c(16.7,
6,
15.5,
14,
18.3,
13.6,
12.9,
17.4,
11,
19.5,
13,
12,
13,
18.2,
15.1,
8.3,
5.2,
11.4,
12.3,
12.6
)
peso
len(peso)
length(peso)
length(consumo)
pairs(peso, consumo)
df.peso = peso
df.consumo = consumo
pairs(df)
df
df.peso
df.consumo
df = data.frame(peso, consumo)
pairs(df)
cor(df)
install.packages(XlConnect)
require(xlsx)
install.packages(XLConnect)
install.packages("XLConnect")
wb = loadWorkbook("myfile.xlsx")
require(XLConnect)
wb = loadWorkbook("myfile.xlsx")
require(XLConnect)
wb = loadWorkbook("myfile.xlsx")
correl(df)
cor(df)
lm(formula = df.peso ~ df.consumo)
cor(df)
require(xlsx)
install.packages(xlsx)
install.packages(xls)
install.packages('xlsx')
require(xlsx)
read.xlsx("myfile.xlsx", sheetName = "Sheet1")
summary(df)
lm(formula =  df.consumo ~ df.peso)
typeof(df.consumo)
df.consumo
df.peso
typeof(df.consumo])
typeof(df.consumo)
tpyoef(df.peso)
typeof(df.peso])
typeof(df.peso)
lm(formula =  df.consumo ~ df.peso)
predict(df)
predict.lm(formula = df.consumo ~ df.peso)
predict(formula = df.consumo ~ df.peso)
predict.lm(formula = df.consumo ~ df.peso)
predict(lm(formula = df.consumo ~ df.peso, object = ))
predict(lm(formula = df.consumo ~ df.peso ))
predict(lm(formula = df.consumo ~ df.peso ))
p = predict(lm(formula = df.consumo ~ df.peso ))
round( (df.consumo - p ) ^2)
(df.consumo - p ) ^ 2
cor(df)
poluicao <- read.table("Pollute.txt")
poluicao <- read.table("Pollute.txt", header = T, sep = "\t")
poluicao <- read.table("C:\Users\1513 IRON\Desktop\Big data\Pollute.txt", header = T, sep = "\t")
poluicao <- read.table("C:\Users\1513 IRON\Desktop\Big data\Pollute.txt", header = T, sep = "\t")
poluicao <- read.table("C:\Users\1513 IRON\Desktop\Big data\Pollute.txt", header = T, sep = "\t")
poluicao <- read.table("C:\Users\Pollute.txt", header = T, sep = "\t")
poluicao <- read.table("C:/Users/Pollute.txt", header = T, sep = "\t")
poluicao
poluicao <- read.table("C:/users/1513 IRON/Desktop/Big data/Pollute.txt", header = T, sep = "\t")
poluicao
par(mfrow=c(1,3))
plot(Pollution~Industry, data=poluicao)
plot(Pollution~Temp, data=poluicao)
plot(Pollution~Wind, data=poluicao)
par(mfrow=c(1,1))
pol.m1 <- lm(Pollution~Industry, data=poluicao)
plot(Pollution~Indusrty, data=poluicao)
plot(Pollution~Industry, data=poluicao)
abline(pol.m1, col="blue")
abine(lm(Pollution~Industry, data=poluicao, subset = industry<max(industry)), col="red")
abine( lm(Pollution~Industry, data=poluicao, subset = Industry< max(Industry)), col="red")
abline( lm(Pollution~Industry, data=poluicao, subset = Industry< max(Industry)), col="red")
anova(pol.m1)
anova(pol.m1)
pol.m0 <- lm(Pollution~1, data=poluicao)
##compare
anova(pol.m0, pol.m1)
anov(pol.m1)
anova(pol.m1)
install.packages("klaR")
excludeColumns <- names(dataset) %in% c("SG_UF", "NM_MUNICIPIO", "NM_PARTIDO")
View(pol.m0)
setwd("C:/Users/1513 IRON/Desktop/Projetos/ProjetosGIT/r-worksheet/votacao") # SETING WORK DIRECTORY
getwd() # GET WORKING DIRECTORY
#acreElections = read.csv("votacao_candidato_munzona_2016_AC.csv", sep = ";") # import CSV
TSEFiles = list.files(path = ".", pattern = "*.csv|*.txt")  #GET ALL TXT AN CSV FILES
for (file in TSEFiles) {
# if the merged dataset doesn't exist, create it
if (!exists("dataset")){
dataset <- read.csv(file, sep=";", header=TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
}
# if the merged dataset does exist, append to it
else if (exists("dataset")){
temp_dataset <- read.csv(file, sep=";", header=TRUE, stringsAsFactors=FALSE, fileEncoding="latin1")
dataset<- rbind(dataset, temp_dataset)
rm(temp_dataset)
}
}
onlyElectedWithMoreThan70kVotes <- dataset$QT_VOTOS_NOMINAIS > 70000 & dataset$DS_SIT_TOT_TURNO == 'ELEITO'
datasetElectedMoreThan70kVotes = dataset[onlyElectedWithMoreThan70kVotes,]
head(datasetElectedMoreThan70kVotes)
datasetElectedMoreThan70kVotes[1,]
onlyPTandPMDBCandidates <- dataset$SG_PARTIDO == "PT" | dataset$SG_PARTIDO == 'PMDB'
datasetPTandPmdb = dataset[onlyPTandPMDBCandidates,]
nrow(datasetPTandPmdb)
nrow(dataset)
unique
unique(datasetPTandPmdb["SG_PARTIDO"])
unique(datasetPTandPmdb["SG_PARTIDO"])
unique(dataset)
unique(dataset["SG_PARTIDO"])
summary(dataset["SG_PARTIDO"])
unique(dataset["SG_PARTIDO"])
typeof(datasetPTandPmdb)
sample(dataset)
sample(1, dataset)
sample(dataset)
sample(dataset, 1)
sample(dataset, 1sample_n)
sample_n(dataset, 10)
install.packages(dplyr)
install.packages("dplyr")
library(dplr)
library(dplyr)
sample_n(dataset, 10)
nrow(sample_n(dataset, 10))
nrow(sample_n(dataset))
nrow(sample_n(dataset, 10))
sample_n(dataset, 10)
sample_n(dataset, 10)
sampleSize = nrow(dataset) * 0.25
sampleSize
nrow(dataset)
sum(dataset["QT_VOTOS_NOMINAIS"])
sum(dataset["QT_VOTOS_NOMINAIS"], na.rm=T)
sum(dataset["QT_VOTOS_NOMINAIS"], na.rm=TRUE)
sum(dataset["QT_VOTOS_NOMINAIS"], na.rm=TRUE)
max(dataset["QT_VOTOS_NOMINAIS"]_
max(dataset["QT_VOTOS_NOMINAIS"])
max(dataset["QT_VOTOS_NOMINAIS"], na.rm=TRUE)
mostVoted <- dataset$QT_VOTOS_NOMINAIS == max(dataset["QT_VOTOS_NOMINAIS"], na.rm=TRUE)
datasetMostVoted[mostVoted,]
datasetMostVoted[mostVoted,]
mostVoted <- dataset$QT_VOTOS_NOMINAIS == max(dataset["QT_VOTOS_NOMINAIS"], na.rm=TRUE)
datasetMostVoted = dataset[mostVoted,]
datasetMostVoted
sumVotes = aggregate(dataset$QT_VOTOS_NOMINAIS, by=list(dataset$NM_CANDIDATO), fun=sum)
sumVotes = aggregate(dataset$QT_VOTOS_NOMINAIS, by=list(dataset$NM_CANDIDATO), FUN=sum)
View(pol.m1)
nrow(sumvotes)
nrow(sumVotes)
sumVotes = aggregate(dataset$QT_VOTOS_NOMINAIS, by=list(dataset$NM_CANDIDATO), FUN=sum)
sumVotes = aggregate(dataset$QT_VOTOS_NOMINAIS, by=list(dataset$NM_CANDIDATO), fun=sum)l
nrow(sumVotes)
onlyDoria = sumVotes$NM_CANDIDATO == "JOÃO AGRIPINO DA COSTA DORIA JUNIOR"
doria = sumVotes[onlyDoria,]
doria
typeof(sumVotes)
sumVotes
onlyDoria = sumVotes$Group.1 == "JOÃO AGRIPINO DA COSTA DORIA JUNIOR"
doria = sumVotes[onlyDoria,]
doria
